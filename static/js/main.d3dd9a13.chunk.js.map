{"version":3,"sources":["assets/heart.svg","assets/spade.svg","assets/diamond.svg","assets/club.svg","components/ShowCards.js","components/OrderedDeck.js","components/RiffleSplit.js","components/RiffleSplitParent.js","components/OverHand.js","components/OverHandParent.js","components/BestShuffle.js","components/BestShuffleParent.js","components/Title.js","components/ManufacturedDeck.js","components/ManufacturedDeckParent.js","App.js","reportWebVitals.js","index.js"],"names":["ShowCards","props","AllCards","suitDictionary","spade","diamond","heart","club","console","log","window","screen","width","Row","slice","map","card","index","Col","style","border","height","borderRadius","src","alt","display","valueDictionary","OrderedDeck","newDeck","Deck","require","Spades","Clubs","Diamonds","Hearts","length","someCard","draw","getSuit","push","sort","a","b","getRank","concat","RiffleSplit","LeftDeck","RightDeck","useState","NewDeck","setNewDeck","Certainty","setCertainty","StoredValues","setStoredValues","xAxis","setxAxis","justifyContent","margin","Slider","onChange","event","value","defaultValue","aria-labelledby","step","valueLabelDisplay","max","Button","id","onClick","splice","toBeReversedDeck","newCertainty","pop","Math","random","reverse","topSum","bottomSum","average","dict","prevItems","AddDataToGraph","i","setTimeout","document","getElementById","click","data","type","title","color","points","keys","RiffleSplitParent","className","textAlign","maxWidth","OverHand","min","finishedDeck","unshift","MoreOrLess","OverHandParent","BestShuffle","KofDPosition","setKofDPosition","position","findKingDiamond","newPosition","floor","BestShuffleParent","Title","ManufacturedDeck","ManufacturedDeckParent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d3dd9a13.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/heart.98868205.svg\";","export default __webpack_public_path__ + \"static/media/spade.ecbe2cf9.svg\";","export default __webpack_public_path__ + \"static/media/diamond.587172c7.svg\";","export default __webpack_public_path__ + \"static/media/club.d51191ce.svg\";","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport heart from '../assets/heart.svg';\nimport spade from '../assets/spade.svg'\nimport diamond from '../assets/diamond.svg';\nimport club from '../assets/club.svg'\nimport { render } from '@testing-library/react';\n\nconst ShowCards = props => {\n\n    const { AllCards } = props;\n\n    const suitDictionary2 = {\n        \"S\": \"♠\",\n        \"D\": \"♦\",\n        \"H\": \"♥\",\n        \"C\": \"♣\"\n    }\n\n    const suitDictionary = {\n        \"S\": spade,\n        \"D\": diamond,\n        \"H\": heart,\n        \"C\": club\n    }\n\n    console.log(AllCards)\n\n    return (\n        <div>\n            {\n                window.screen.width > 1100 ? (\n                    <div>\n                        <Row>\n                            {AllCards.slice(0, 13).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(13, 26).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(26, 39).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(39, 52).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                    </div>\n                )\n\n                    :\n\n                    (<div style={{ display: 'block' }}>\n\n\n                        {AllCards.slice(0, 51).map((card, index) =>\n                            <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                {card[\"rank\"]}\n                                <br />\n                                <img style={{ width: 10 }} src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                            </Col>\n                        )}\n\n                    </div>)\n\n            }\n\n\n        </div>\n\n    );\n\n}\nexport default ShowCards;","import React from 'react'\n\nlet valueDictionary = {\n    \"A\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"10\": 10,\n    \"J\": 11,\n    \"Q\": 12,\n    \"K\": 13,\n}\n\nfunction OrderedDeck() {\n    const Deck = require('deck-js').Deck;\n    let newDeck = new Deck();\n\n    let Spades = [];\n    let Clubs = [];\n    let Diamonds = [];\n    let Hearts = [];\n\n    while (newDeck.length() > 0) {\n        let someCard = newDeck.draw();\n\n        if (someCard.getSuit() === \"S\") {\n            Spades.push(someCard)\n        }\n\n        if (someCard.getSuit() === \"H\") {\n            Hearts.push(someCard)\n        }\n\n        if (someCard.getSuit() === \"D\") {\n            Diamonds.push(someCard)\n        }\n\n        if (someCard.getSuit() === \"C\") {\n            Clubs.push(someCard)\n        }\n    }\n\n    Spades.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n    Hearts.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n    Clubs.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n    Diamonds.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n\n    let OrganizedCards = [].concat(Spades).concat(Hearts).concat(Clubs).concat(Diamonds)\n    return OrganizedCards;\n\n}\n\n\n\nexport default OrderedDeck;","import { Slider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport Chart from \"r-chart\";\n\nconst RiffleSplit = () => {\n\n    //for shuffling purposes\n    let LeftDeck = [];\n    let RightDeck = [];\n\n    //the deck that we will begin with and arrange\n    const [NewDeck, setNewDeck] = useState(OrderedDeck());\n\n    //How good the dealer is at shuffling\n    const [Certainty, setCertainty] = useState(0);\n\n    //graphing values\n    const [StoredValues, setStoredValues] = useState([{ \"key\": 0, \"value\": 0 }]);\n    const [xAxis, setxAxis] = useState([0]);\n\n    //perform classic shuffle on our working deck\n    const ClassicShuffle = () => {\n\n        LeftDeck = NewDeck.splice(0, 26)\n        RightDeck = NewDeck.splice(0, 26)\n        let toBeReversedDeck = [];\n\n        let newCertainty = Certainty;\n        let value = 0.5 + Certainty;\n\n        while (toBeReversedDeck.length < 52) {\n            value = 0.5 + newCertainty;\n            if (LeftDeck.length === 0 && RightDeck.length) {\n                toBeReversedDeck.push(RightDeck.pop())\n            }\n\n            if (RightDeck.length === 0 && LeftDeck.length) {\n                toBeReversedDeck.push(LeftDeck.pop())\n            }\n\n            if (Math.random() > value && LeftDeck.length) {\n                toBeReversedDeck.push(LeftDeck.pop())\n                newCertainty = newCertainty * -1;\n            }\n\n            else {\n                if (RightDeck.length) {\n                    toBeReversedDeck.push(RightDeck.pop());\n                    newCertainty = newCertainty * -1;\n                }\n            }\n        }\n\n        toBeReversedDeck.reverse();\n\n        setNewDeck(toBeReversedDeck)\n        AddDataToGraph(toBeReversedDeck);\n    }\n\n    //Hard reset everything (graph and init a new deck)\n    const HandleReset = () => {\n        setStoredValues([{ \"key\": 0, \"value\": 0 }]);\n        setxAxis([0]);\n        setNewDeck(OrderedDeck())\n    }\n\n    //Add data to graph dictionary\n    function AddDataToGraph(newDeck) {\n\n        //for quantifying values in deck\n        let valueDictionary = {\n            \"A\": 1,\n            \"2\": 2,\n            \"3\": 3,\n            \"4\": 4,\n            \"5\": 5,\n            \"6\": 6,\n            \"7\": 7,\n            \"8\": 8,\n            \"9\": 9,\n            \"10\": 10,\n            \"J\": 11,\n            \"Q\": 12,\n            \"K\": 13,\n        };\n\n        let topSum = 0;\n        let bottomSum = 0;\n\n        newDeck.map(\n            (card, index) => {\n\n                if (index < 26) {\n                    topSum += valueDictionary[card[\"rank\"]]\n                }\n                else {\n                    bottomSum += valueDictionary[card[\"rank\"]]\n                }\n            }\n        )\n        let average = topSum - bottomSum;\n        let dict = { \"key\": StoredValues.length, \"value\": average };\n\n        setStoredValues(prevItems => [...prevItems, dict]);\n        setxAxis(prevItems => [...prevItems, dict[\"key\"]]);\n    }\n\n    //find button with id \"TEST1\" and click on it 10 times\n    const TenClassicShuffles = () => {\n        for (let i = 1; i < 11; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST1\").click();\n            }, 100 * i)\n        }\n    }\n\n    //find button with id \"TEST1\" and click on it 100 times\n    const HundredClassicShuffles = () => {\n        for (let i = 1; i < 101; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST1\").click();\n            }, 100 * i)\n        }\n    }\n\n    return (\n        <div >\n            <Col>\n                <Row style={{ justifyContent: 'center' }}>\n                    <strong>Shuffle Skill Slider Bar (Higher is Better) </strong>\n                </Row>\n\n                <Row style={{ justifyContent: 'center', margin: '30px' }}>\n                    <Slider\n                        onChange={(event, value) => { setCertainty(value / 200) }}\n                        defaultValue={0}\n                        aria-labelledby=\"discrete-slider-custom\"\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        max={100}\n                    />\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Button id=\"TEST1\" onClick={ClassicShuffle} style={{ margin: '5px' }} >Shuffle</Button>\n                    <Button onClick={TenClassicShuffles} style={{ margin: '5px' }} >Shuffle 10</Button>\n                    <Button onClick={HundredClassicShuffles} style={{ margin: '5px' }} >Shuffle 100</Button>\n                    <Button onClick={HandleReset} style={{ margin: '5px' }} >Reset</Button>\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Chart\n                        data={[\n                            {\n                                type: 'line',\n                                title: 'Top Half Points vs Bottom Half Points',\n                                color: 'blue',\n                                points: StoredValues\n                            }\n                        ]}\n                        keys={\n                            xAxis\n                        }\n                    />\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <ShowCards AllCards={NewDeck} />\n                </Row>\n            </Col>\n        </div>\n    );\n}\n\nexport default RiffleSplit;","import React from 'react';\nimport RiffleSplit from './RiffleSplit';\n\nconst RiffleSplitParent = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Riffle Split</h3>\n            The Riffle split is probably the most common type of shuffle. What most people do is seperate\n            a deck in two and merge both halfs together randomly.\n            The suspicious behavior of this technique is that, if we were to start off with a manufactured deck, then the high cards will always go\n            to the bottom of the deck. Below you can shuffle a sample deck and see where most of the high cards go in the first few shuffles.\n            <br />\n            <br />\n            <div style={{ textAlign: 'center' }}>\n                <h4>Riffle Split example</h4>\n\n                <img style={{ maxWidth: window.screen.width - 80 }} src=\"https://fredhohman.com/card-shuffling/static/images/riffle.gif\" alt=\"classic shuffle gif\" />\n            </div>\n\n            <br />\n\n            <RiffleSplit />\n            <br />\n            After a while, the deck does approach a random assortment of cards. Unfortunately, this type of shuffling method doesn't allow\n            new cards on to the top or bottom of the deck. It is extremely static on the ends of the deck.\n            If this is the only method of shuffling used, you will be recycling used cards again and again.\n\n            What's worse, is that if you perfect your shuffling skill (slide the bar to 100 and shuffle 100 times),\n            then you will see the deck shuffles through five or six different orientations.\n            The solution to these issues are to shuffle more than a handful of times and to shuffle poorly.\n            This way, you'll give every orientation of the deck a chance to exist.\n            <br />\n            <br />\n        </div>\n    )\n\n}\n\nexport default RiffleSplitParent","import { Slider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport Chart from \"r-chart\";\n\nconst OverHand = () => {\n\n    //for shuffling purposes\n    let LeftDeck = [];\n    let RightDeck = [];\n\n    //the deck that we will begin with and arrange\n    const [NewDeck, setNewDeck] = useState(OrderedDeck());\n\n    //How good the dealer is at shuffling\n    const [Certainty, setCertainty] = useState(7);\n\n    //graphing values\n    const [StoredValues, setStoredValues] = useState([{ \"key\": 0, \"value\": 0 }]);\n    const [xAxis, setxAxis] = useState([0]);\n\n    //perform OverHand shuffle on our working deck\n    const OverHandShuffle = () => {\n        LeftDeck = NewDeck.splice(0, 52)\n        let finishedDeck = [];\n        let newCertainty = Certainty;\n\n        //While we are moving cards over\n        while (finishedDeck.length < 52) {\n\n            if (LeftDeck.length <= newCertainty) {\n                LeftDeck.reverse()\n                LeftDeck.map(card => finishedDeck.unshift(card))\n            }\n\n            if (LeftDeck.length > newCertainty) {\n                let MoreOrLess = Math.random();\n\n                if (MoreOrLess < 0.5) {\n                    RightDeck = LeftDeck.splice(0, newCertainty - 1)\n                }\n\n                else {\n                    RightDeck = LeftDeck.splice(0, newCertainty + 1)\n                }\n                RightDeck.reverse()\n                RightDeck.map(card => finishedDeck.unshift(card))\n            }\n\n        }\n        setNewDeck(finishedDeck)\n        AddDataToGraph(finishedDeck);\n    }\n\n    //Hard reset everything (graph and init a new deck)\n    const HandleReset = () => {\n        setStoredValues([{ \"key\": 0, \"value\": 0 }]);\n        setxAxis([0]);\n        setNewDeck(OrderedDeck())\n    }\n\n    //Add data to graph dictionary\n    function AddDataToGraph(newDeck) {\n\n        //for quantifying values in deck\n        let valueDictionary = {\n            \"A\": 1,\n            \"2\": 2,\n            \"3\": 3,\n            \"4\": 4,\n            \"5\": 5,\n            \"6\": 6,\n            \"7\": 7,\n            \"8\": 8,\n            \"9\": 9,\n            \"10\": 10,\n            \"J\": 11,\n            \"Q\": 12,\n            \"K\": 13,\n        };\n\n        let topSum = 0;\n        let bottomSum = 0;\n\n        newDeck.map(\n            (card, index) => {\n\n                if (index < 26) {\n                    topSum += valueDictionary[card[\"rank\"]]\n                }\n                else {\n                    bottomSum += valueDictionary[card[\"rank\"]]\n                }\n            }\n        )\n        let average = topSum - bottomSum;\n        let dict = { \"key\": StoredValues.length, \"value\": average };\n        setStoredValues(prevItems => [...prevItems, dict]);\n        setxAxis(prevItems => [...prevItems, dict[\"key\"]]);\n    }\n\n    //find button with id \"TEST2\" and click on it 10 times\n    const TenOverHandShuffles = () => {\n        for (let i = 1; i < 11; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST2\").click();\n            }, 100 * i)\n        }\n    }\n\n    //find button with id \"TEST2\" and click on it 100 times\n    const HundredOverHandShuffles = () => {\n        for (let i = 1; i < 101; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST2\").click();\n            }, 100 * i)\n        }\n    }\n\n    return (\n        <div >\n            <Col>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <strong> Shuffle Chunks (Greater is More Clumped) </strong>\n                </Row>\n\n                <br />\n                <Row style={{ justifyContent: 'center', margin: '30px' }}>\n                    <Slider\n                        onChange={(event, value) => { setCertainty(value) }}\n                        defaultValue={7}\n                        aria-labelledby=\"discrete-slider-custom\"\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        min={4}\n                        max={10}\n                    />\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n\n                    <Button id=\"TEST2\" onClick={OverHandShuffle} style={{ margin: '5px' }} >Shuffle</Button>\n                    <Button onClick={TenOverHandShuffles} style={{ margin: '5px' }} >Shuffle 10</Button>\n                    <Button onClick={HundredOverHandShuffles} style={{ margin: '5px' }} >Shuffle 100</Button>\n                    <Button onClick={HandleReset} style={{ margin: '5px' }} >Reset</Button>\n\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Chart\n                        data={[\n                            {\n                                type: 'line',\n                                title: 'Top Half Points vs Bottom Half Points',\n                                color: 'red',\n                                points: StoredValues\n                            }\n                        ]}\n                        keys={\n                            xAxis\n                        }\n                    />\n\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <ShowCards AllCards={NewDeck} />\n                </Row>\n            </Col>\n\n        </div>\n    );\n}\n\nexport default OverHand;","import React from 'react';\nimport OverHand from './OverHand';\n\nconst OverHandParent = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Overhand Shuffle</h3>\n            The Overhand shuffle is probably the second most common type of shuffle.\n            The behavior of this shuffling technique is that the cards are severely clumped\n            together. You could predict what cards your opponent has due to the clumping of cards.\n\n            Below you can shuffle a sample deck and see how little the deck has\n            actually been shuffled after an <strong>EVEN</strong> number of shuffles.\n            <br />\n            <br />\n            <div style={{ textAlign: 'center' }}>\n                <img style={{ maxWidth: window.screen.width - 80 }} src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/375ce685-c00c-4f3b-a467-1f6a38391fdd/d88npqq-2a2c5683-2253-4d20-8bbb-371f378b0795.gif?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzM3NWNlNjg1LWMwMGMtNGYzYi1hNDY3LTFmNmEzODM5MWZkZFwvZDg4bnBxcS0yYTJjNTY4My0yMjUzLTRkMjAtOGJiYi0zNzFmMzc4YjA3OTUuZ2lmIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.gnxKmUMykmQHwBbIMxTPrpNehQVE6G868fhqUS_PQtc\" alt=\"overhand shuffle gif\" />\n            </div>\n\n            <br />\n\n\n            <OverHand />\n\n            <br />\n            This shuffle is by far worse that the Riffle split because it isn't\n            moving more than a few cards at a time. The position of a card and\n            it's neighbors will not vary half the time. Even if we were to shuffle\n            hundreds and hundreds of times (Shuffle 100), there is still a high card bias with every other\n            shuffle. So depending on the number of times you shuffle (Even VS. Odd number of times), you may or may not\n            play with many high cards.\n            <br />\n\n        </div>\n    )\n\n}\n\nexport default OverHandParent","import { Slider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport Chart from \"r-chart\";\n\nconst BestShuffle = () => {\n\n    //for shuffling purposes\n    let LeftDeck = [];\n    let RightDeck = [];\n\n    //the deck that we will begin with and arrange\n    const [NewDeck, setNewDeck] = useState(OrderedDeck());\n    const [KofDPosition, setKofDPosition] = useState(-52);\n\n    //graphing values\n    const [StoredValues, setStoredValues] = useState([{ \"key\": 0, \"value\": -52 }]);\n    const [xAxis, setxAxis] = useState([0]);\n\n    //perform BestShuffle shuffle on our working deck\n    const BestShuffleShuffle = () => {\n        findKingDiamond();\n\n        if (KofDPosition < -1) {\n            LeftDeck = NewDeck.splice(0, 1);\n            RightDeck = NewDeck.splice(0, 51);\n\n            let newPosition = Math.floor(Math.random() * 51) + 1\n            RightDeck.splice(newPosition, 0, LeftDeck.pop());\n\n            setNewDeck(RightDeck)\n            AddDataToGraph();\n        }\n    }\n\n    function findKingDiamond() {\n        let position = 52;\n        NewDeck.map((card, index) => {\n            if (card[\"rank\"] === \"K\" && card[\"suit\"] === \"D\") {\n                position = index;\n            }\n        })\n        setKofDPosition(-position)\n    }\n\n    //Hard reset everything (graph and init a new deck)\n    const HandleReset = () => {\n        setStoredValues([{ \"key\": 0, \"value\": -52 }]);\n        setxAxis([0]);\n        setNewDeck(OrderedDeck())\n    }\n\n    //Add data to graph dictionary\n    function AddDataToGraph() {\n        let dict = { \"key\": StoredValues.length, \"value\": KofDPosition };\n\n        setStoredValues(prevItems => [...prevItems, dict]);\n        setxAxis(prevItems => [...prevItems, dict[\"key\"]]);\n    }\n\n    //find button with id \"Test3\" and click on it 10 times\n    const TenBestShuffleShuffles = () => {\n        for (let i = 1; i < 11; i++) {\n            setTimeout(() => {\n                document.getElementById(\"Test3\").click();\n            }, 100 * i)\n        }\n    }\n\n    //find button with id \"Test3\" and click on it 100 times\n    const HundredBestShuffleShuffles = () => {\n        for (let i = 1; i < 101; i++) {\n            setTimeout(() => {\n                document.getElementById(\"Test3\").click();\n            }, 100 * i)\n        }\n    }\n\n    return (\n        <div >\n            <Col>\n                <Row style={{ justifyContent: 'center' }}>\n                    <strong>Average is 236 Shuffles</strong>\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n\n                    <Button id=\"Test3\" onClick={BestShuffleShuffle} style={{ margin: '5px' }} >Shuffle</Button>\n                    <Button onClick={TenBestShuffleShuffles} style={{ margin: '5px' }} >Shuffle 10</Button>\n                    <Button onClick={HundredBestShuffleShuffles} style={{ margin: '5px' }} >Shuffle 100</Button>\n                    <Button onClick={HandleReset} style={{ margin: '5px' }} >Reset</Button>\n\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Chart\n                        data={[\n                            {\n                                type: 'line',\n                                title: 'Position of The King Of Diamonds per Shuffle',\n                                color: 'green',\n                                points: StoredValues\n                            }\n                        ]}\n                        keys={\n                            xAxis\n                        }\n                    />\n\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <ShowCards AllCards={NewDeck} />\n                </Row>\n            </Col>\n\n        </div>\n    );\n}\n\nexport default BestShuffle;","import React from 'react';\nimport BestShuffle from './BestShuffle';\n\nconst BestShuffleParent = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Low Rise Shuffle</h3>\n            This last shuffle method is one that you probably haven't heard of.\n            The technique here is to move the top card into a random spot into the deck.\n            As you progress this shuffle, you will notice that a pre-determined\n            \"bottom card\" (King of Diamonds) will slowly move up in position. Once the \"bottom card\"\n             has moved all the way up to the top of the deck, it is safe to say that most of the deck has been shuffled.\n             All that would be left is to move the bottom card into a random position into the deck.\n             This way, you will have truly randomized the deck.\n\n            Below you can shuffle a sample deck and see how many shuffles it takes\n             to get the bottom King of Diamonds card to the top of the deck.\n            <br />\n            <br />\n\n            <BestShuffle />\n        </div>\n    )\n\n}\n\nexport default BestShuffleParent","\nconst Title = () => {\n\n\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <h1>\n                Why You're So Bad At Shuffling\n            </h1>\n            <h3>By Erick Saenz</h3>\n        </div>\n\n    );\n}\n\nexport default Title;\n","\nimport React from 'react';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport { Col, Row } from 'react-bootstrap';\n\nconst ManufacturedDeck = () => {\n  const AllCards = OrderedDeck();\n\n  return (\n    <div>\n      <Col>\n        <Row style={{ justifyContent: 'center' }}>\n          <ShowCards AllCards={AllCards} />\n        </Row>\n      </Col>\n    </div>\n  );\n}\n\nexport default ManufacturedDeck;\n","\nimport React from 'react';\nimport ManufacturedDeck from './ManufacturedDeck'\n\nconst ManufacturedDeckParent = props => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            One of the few things that my friends and family criticize is the way\n            we shuffle cards. We play a variety of games, but our shuffling\n            techniques between each game remains the same. Since we were taught\n            how to shuffle decks as children, we never questioned the integrity\n            of the shuffle. In this article, I wanted to put popular shuffling techniques\n            to the test and determine what technique truly randomizes the deck of cards.\n\n            Below we see the deck that most manufacturers distrubute. This initial set of\n            the deck is fairly standard but it raises a question, how many shuffles would it\n            take to get the opposite orientation of this deck? Shouldn't that inverted\n            orientation of the deck have a fair chance to appear in a given shuffle?\n            <br />\n            <br />\n            <h3>Standard Deck of Cards</h3>\n\n            < ManufacturedDeck />\n            <br />\n            <br />\n            The answer is no, and the reasoning behind that is that our shuffling techniques,\n            don't provides sufficient randomization.\n\n            <br /><br />\n        </div>\n    );\n}\n\nexport default ManufacturedDeckParent;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport RiffleSplitParent from './components/RiffleSplitParent'\nimport OverHandParent from './components/OverHandParent';\nimport BestShuffleParent from './components/BestShuffleParent';\nimport Title from './components/Title';\nimport ManufacturedDeckParent from './components/ManufacturedDeckParent';\n\nconst App = () => {\n\n  return (\n    <div style={{ justifyContent: 'center', display: 'flex' }}>\n\n      {\n        window.screen.width > 1100 ?\n\n          (<div className=\"d-none d-lg-block\" style={{ maxWidth: \"1100px\" }}>\n            <Title />\n            <ManufacturedDeckParent />\n            <RiffleSplitParent />\n            <OverHandParent />\n            <BestShuffleParent />\n          </div>)\n          :\n\n          (<div className=\"d-lg-none\" style={{ maxWidth: window.screen.width - 50 }} >\n\n            <Title />\n            <ManufacturedDeckParent />\n            <RiffleSplitParent />\n            <OverHandParent />\n            <BestShuffleParent />\n          </div>\n          )\n      }\n\n\n\n    </div>\n\n  );\n}\n\nexport default App;\n\n\n//      <div className=\"d-none d-lg-block\" style={{ maxWidth: \"1100px\" }}>\n//      <div/>\n\n//      <div className = \"d-lg-none\">\n//      <div/>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}