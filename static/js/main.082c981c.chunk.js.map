{"version":3,"sources":["assets/heart.svg","assets/spade.svg","assets/diamond.svg","assets/club.svg","components/ShowCards.js","components/OrderedDeck.js","components/RiffleSplit.js","components/RiffleSplitParent.js","components/OverHand.js","components/OverHandParent.js","components/ShowCardsAndKD.js","components/BestShuffle.js","components/BestShuffleParent.js","components/Introduction.js","components/Title.js","components/ManufacturedDeck.js","components/ManufacturedDeckParent.js","components/SumDraw.js","components/RandomParent.js","components/Conclusion.js","components/Permutations.js","components/ShowThreeArrangements.js","components/TotalPermutations.js","App.js","reportWebVitals.js","index.js"],"names":["ShowCards","props","AllCards","suitDictionary","spade","diamond","heart","club","window","screen","width","Row","slice","map","card","index","Col","style","border","height","borderRadius","src","alt","margin","valueDictionary","OrderedDeck","newDeck","Deck","require","Spades","Clubs","Diamonds","Hearts","length","someCard","draw","getSuit","push","sort","a","b","getRank","concat","RiffleSplit","LeftDeck","RightDeck","useState","NewDeck","setNewDeck","Certainty","setCertainty","StoredValues","setStoredValues","xAxis","setxAxis","justifyContent","Slider","onChange","event","value","defaultValue","aria-labelledby","step","valueLabelDisplay","max","Button","id","onClick","splice","toBeReversedDeck","newCertainty","pop","Math","random","reverse","topSum","bottomSum","average","dict","prevItems","AddDataToGraph","i","setTimeout","document","getElementById","click","data","type","title","color","points","keys","RiffleSplitParent","className","textAlign","maxWidth","OverHand","min","finishedDeck","unshift","MoreOrLess","OverHandParent","ShowCardsAndKD","BestShuffle","KofDPosition","setKofDPosition","position","findKingDiamond","newPosition","floor","BestShuffleParent","Introduction","Title","ManufacturedDeck","ManufacturedDeckParent","SumDraw","Provider","options","tex2jax","inlineMath","Node","formula","RandomParent","Conclusion","Permutations","innerWidth","ShowThreeArrangements","TotalPermutations","App","windowSize","setWindowSize","addEventListener","this","display","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.082c981c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/heart.98868205.svg\";","export default __webpack_public_path__ + \"static/media/spade.ecbe2cf9.svg\";","export default __webpack_public_path__ + \"static/media/diamond.587172c7.svg\";","export default __webpack_public_path__ + \"static/media/club.d51191ce.svg\";","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport heart from '../assets/heart.svg';\nimport spade from '../assets/spade.svg'\nimport diamond from '../assets/diamond.svg';\nimport club from '../assets/club.svg'\nimport \"./invert.css\"\n\nconst ShowCards = props => {\n    const { AllCards } = props;\n\n    const suitDictionary = {\n        \"S\": spade,\n        \"D\": diamond,\n        \"H\": heart,\n        \"C\": club\n    }\n\n    return (\n        <div>\n            {\n                window.screen.width > 1100 ? (\n                    <div>\n                        <Row>\n                            {AllCards.slice(0, 13).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row>\n                            {AllCards.slice(13, 26).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row>\n                            {AllCards.slice(26, 39).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row>\n                            {AllCards.slice(39, 52).map((card, index) =>\n                                <Col key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                    </div>\n                )\n\n                    :\n\n                    (<div>\n                        <Row >\n                            {AllCards.slice(0, 13).map((card, index) =>\n                                <rect key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(13, 26).map((card, index) =>\n                                <rect key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(26, 39).map((card, index) =>\n                                <rect key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(39, 52).map((card, index) =>\n                                <rect key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                    </div>)\n\n            }\n\n\n        </div>\n\n    );\n\n}\nexport default ShowCards;","import React from 'react'\n\nlet valueDictionary = {\n    \"A\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"10\": 10,\n    \"J\": 11,\n    \"Q\": 12,\n    \"K\": 13,\n}\n\nfunction OrderedDeck() {\n    const Deck = require('deck-js').Deck;\n    let newDeck = new Deck();\n\n    let Spades = [];\n    let Clubs = [];\n    let Diamonds = [];\n    let Hearts = [];\n\n    while (newDeck.length() > 0) {\n        let someCard = newDeck.draw();\n\n        if (someCard.getSuit() === \"S\") {\n            Spades.push(someCard)\n        }\n\n        if (someCard.getSuit() === \"H\") {\n            Hearts.push(someCard)\n        }\n\n        if (someCard.getSuit() === \"D\") {\n            Diamonds.push(someCard)\n        }\n\n        if (someCard.getSuit() === \"C\") {\n            Clubs.push(someCard)\n        }\n    }\n\n    Spades.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n    Hearts.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n    Clubs.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n    Diamonds.sort(function (a, b) { return (valueDictionary[a.getRank()] - valueDictionary[b.getRank()]) })\n\n    let OrganizedCards = [].concat(Spades).concat(Hearts).concat(Clubs).concat(Diamonds)\n    return OrganizedCards;\n\n}\n\n\n\nexport default OrderedDeck;","import { Slider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport Chart from \"r-chart\";\n\nconst RiffleSplit = () => {\n\n    //for shuffling purposes\n    let LeftDeck = [];\n    let RightDeck = [];\n\n    //the deck that we will begin with and arrange\n    const [NewDeck, setNewDeck] = useState(OrderedDeck());\n\n    //How good the dealer is at shuffling\n    const [Certainty, setCertainty] = useState(0);\n\n    //graphing values\n    const [StoredValues, setStoredValues] = useState([{ \"key\": 0, \"value\": 0 }]);\n    const [xAxis, setxAxis] = useState([0]);\n\n    //perform classic shuffle on our working deck\n    const ClassicShuffle = () => {\n\n        LeftDeck = NewDeck.splice(0, 26)\n        RightDeck = NewDeck.splice(0, 26)\n        let toBeReversedDeck = [];\n\n        let newCertainty = Certainty;\n        let value = 0.5 + Certainty;\n\n        while (toBeReversedDeck.length < 52) {\n            value = 0.5 + newCertainty;\n            if (LeftDeck.length === 0 && RightDeck.length) {\n                toBeReversedDeck.push(RightDeck.pop())\n            }\n\n            if (RightDeck.length === 0 && LeftDeck.length) {\n                toBeReversedDeck.push(LeftDeck.pop())\n            }\n\n            if (Math.random() > value && LeftDeck.length) {\n                toBeReversedDeck.push(LeftDeck.pop())\n                newCertainty = newCertainty * -1;\n            }\n\n            else {\n                if (RightDeck.length) {\n                    toBeReversedDeck.push(RightDeck.pop());\n                    newCertainty = newCertainty * -1;\n                }\n            }\n        }\n\n        toBeReversedDeck.reverse();\n\n        setNewDeck(toBeReversedDeck)\n        AddDataToGraph(toBeReversedDeck);\n    }\n\n    //Hard reset everything (graph and init a new deck)\n    const HandleReset = () => {\n        setStoredValues([{ \"key\": 0, \"value\": 0 }]);\n        setxAxis([0]);\n        setNewDeck(OrderedDeck())\n    }\n\n    //Add data to graph dictionary\n    function AddDataToGraph(newDeck) {\n\n        //for quantifying values in deck\n        let valueDictionary = {\n            \"A\": 1,\n            \"2\": 2,\n            \"3\": 3,\n            \"4\": 4,\n            \"5\": 5,\n            \"6\": 6,\n            \"7\": 7,\n            \"8\": 8,\n            \"9\": 9,\n            \"10\": 10,\n            \"J\": 11,\n            \"Q\": 12,\n            \"K\": 13,\n        };\n\n        let topSum = 0;\n        let bottomSum = 0;\n\n        newDeck.map(\n            (card, index) => {\n\n                if (index < 26) {\n                    topSum += valueDictionary[card[\"rank\"]]\n                }\n                else {\n                    bottomSum += valueDictionary[card[\"rank\"]]\n                }\n            }\n        )\n        let average = topSum - bottomSum;\n        let dict = { \"key\": StoredValues.length, \"value\": average };\n\n        setStoredValues(prevItems => [...prevItems, dict]);\n        setxAxis(prevItems => [...prevItems, dict[\"key\"]]);\n    }\n\n    //find button with id \"TEST1\" and click on it 10 times\n    const TenClassicShuffles = () => {\n        for (let i = 1; i < 11; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST1\").click();\n            }, 100 * i)\n        }\n    }\n\n    //find button with id \"TEST1\" and click on it 100 times\n    const HundredClassicShuffles = () => {\n        for (let i = 1; i < 101; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST1\").click();\n            }, 100 * i)\n        }\n    }\n\n    return (\n        <div >\n            <Col>\n                <Row style={{ justifyContent: 'center' }}>\n                    <strong>Shuffle Skill Slider Bar (Higher is Better) </strong>\n                </Row>\n\n                <Row style={{ justifyContent: 'center', margin: '30px' }}>\n                    <Slider\n                        onChange={(event, value) => { setCertainty(value / 200) }}\n                        defaultValue={0}\n                        aria-labelledby=\"discrete-slider-custom\"\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        max={100}\n                    />\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Button id=\"TEST1\" onClick={ClassicShuffle} style={{ margin: '5px' }} >Shuffle</Button>\n                    <Button onClick={TenClassicShuffles} style={{ margin: '5px' }} >Shuffle 10</Button>\n                    <Button onClick={HundredClassicShuffles} style={{ margin: '5px' }} >Shuffle 100</Button>\n                    <Button onClick={HandleReset} style={{ margin: '5px' }} >Reset</Button>\n                </Row>\n\n\n                <br />\n                <Row style={{ justifyContent: 'center' }}>\n                    <ShowCards AllCards={NewDeck} />\n                </Row>\n\n                <br />\n                <Row style={{ justifyContent: 'center' }}> <strong>Compare Top Half Sum vs Bottom Half Sum</strong></Row>\n                <Row style={{ justifyContent: 'center' }}>\n                    <Chart\n                        data={[\n                            {\n                                type: 'line',\n                                title: 'Top Half Points vs Bottom Half Points',\n                                color: 'blue',\n                                points: StoredValues\n                            }\n                        ]}\n                        keys={\n                            xAxis\n                        }\n                    />\n                </Row>\n            </Col>\n        </div>\n    );\n}\n\nexport default RiffleSplit;","import React from 'react';\nimport RiffleSplit from './RiffleSplit';\n\nconst RiffleSplitParent = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Riffle Split</h3>\n            The Riffle split is probably the most common type of shuffle. To perform this technique, seperate\n            a deck in two and merge both halfs together randomly.\n            The suspicious behavior of this technique is that, if we were to start off with a manufactured deck, then the high cards will always go\n            to the bottom of the deck. Below you can shuffle a sample deck and see where most of the high cards go in the first few shuffles.\n            <br />\n            <br />\n            <div style={{ textAlign: 'center' }}>\n                <h4>Riffle Split Example</h4>\n                <img style={{ maxWidth: window.screen.width - 80 }} src=\"https://fredhohman.com/card-shuffling/static/images/riffle.gif\" alt=\"classic shuffle gif\" />\n            </div>\n\n            <br />\n\n            <RiffleSplit />\n            <br />\n            After a while, the deck does approach a random assortment of cards.\n            Unfortunately, this type of shuffling method is extremely static on the ends of the deck.\n            It doesn't allow new cards on to the top or bottom of the deck.\n            If this is the only method of shuffling used, you will be recycling\n            used cards again and again because the top few cards won't move very far.\n            <br />\n            <br />\n            What's worse, is that if you perfect your shuffling skill (slide the bar to 100 and shuffle 100 times),\n            then you will see the deck shuffles through five or six different orientations.\n            This perfect shuffle defeats the purpose entirely of randomness and disables proper\n            card playing.\n            <br />\n            <br />The solution to these issues are to shuffle more than a handful of times and to shuffle poorly.\n            This way, you'll give every orientation of the deck a chance to exist.\n            <br />\n            <br />\n        </div>\n    )\n\n}\n\nexport default RiffleSplitParent","import { Slider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport Chart from \"r-chart\";\n\nconst OverHand = () => {\n\n    //for shuffling purposes\n    let LeftDeck = [];\n    let RightDeck = [];\n\n    //the deck that we will begin with and arrange\n    const [NewDeck, setNewDeck] = useState(OrderedDeck());\n\n    //How good the dealer is at shuffling\n    const [Certainty, setCertainty] = useState(7);\n\n    //graphing values\n    const [StoredValues, setStoredValues] = useState([{ \"key\": 0, \"value\": 0 }]);\n    const [xAxis, setxAxis] = useState([0]);\n\n    //perform OverHand shuffle on our working deck\n    const OverHandShuffle = () => {\n        LeftDeck = NewDeck.splice(0, 52)\n        let finishedDeck = [];\n        let newCertainty = Certainty;\n\n        //While we are moving cards over\n        while (finishedDeck.length < 52) {\n\n            if (LeftDeck.length <= newCertainty) {\n                LeftDeck.reverse()\n                LeftDeck.map(card => finishedDeck.unshift(card))\n            }\n\n            if (LeftDeck.length > newCertainty) {\n                let MoreOrLess = Math.random();\n\n                if (MoreOrLess < 0.5) {\n                    RightDeck = LeftDeck.splice(0, newCertainty - 1)\n                }\n\n                else {\n                    RightDeck = LeftDeck.splice(0, newCertainty + 1)\n                }\n                RightDeck.reverse()\n                RightDeck.map(card => finishedDeck.unshift(card))\n            }\n\n        }\n        setNewDeck(finishedDeck)\n        AddDataToGraph(finishedDeck);\n    }\n\n    //Hard reset everything (graph and init a new deck)\n    const HandleReset = () => {\n        setStoredValues([{ \"key\": 0, \"value\": 0 }]);\n        setxAxis([0]);\n        setNewDeck(OrderedDeck())\n    }\n\n    //Add data to graph dictionary\n    function AddDataToGraph(newDeck) {\n\n        //for quantifying values in deck\n        let valueDictionary = {\n            \"A\": 1,\n            \"2\": 2,\n            \"3\": 3,\n            \"4\": 4,\n            \"5\": 5,\n            \"6\": 6,\n            \"7\": 7,\n            \"8\": 8,\n            \"9\": 9,\n            \"10\": 10,\n            \"J\": 11,\n            \"Q\": 12,\n            \"K\": 13,\n        };\n\n        let topSum = 0;\n        let bottomSum = 0;\n\n        newDeck.map(\n            (card, index) => {\n\n                if (index < 26) {\n                    topSum += valueDictionary[card[\"rank\"]]\n                }\n                else {\n                    bottomSum += valueDictionary[card[\"rank\"]]\n                }\n            }\n        )\n        let average = topSum - bottomSum;\n        let dict = { \"key\": StoredValues.length, \"value\": average };\n        setStoredValues(prevItems => [...prevItems, dict]);\n        setxAxis(prevItems => [...prevItems, dict[\"key\"]]);\n    }\n\n    //find button with id \"TEST2\" and click on it 10 times\n    const TenOverHandShuffles = () => {\n        for (let i = 1; i < 11; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST2\").click();\n            }, 100 * i)\n        }\n    }\n\n    //find button with id \"TEST2\" and click on it 100 times\n    const HundredOverHandShuffles = () => {\n        for (let i = 1; i < 101; i++) {\n            setTimeout(() => {\n                document.getElementById(\"TEST2\").click();\n            }, 100 * i)\n        }\n    }\n\n    return (\n        <div >\n            <Col>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <strong> Shuffle Chunks (Greater is More Clumped) </strong>\n                </Row>\n\n                <br />\n                <Row style={{ justifyContent: 'center', margin: '30px' }}>\n                    <Slider\n                        onChange={(event, value) => { setCertainty(value) }}\n                        defaultValue={7}\n                        aria-labelledby=\"discrete-slider-custom\"\n                        step={1}\n                        valueLabelDisplay=\"on\"\n                        min={4}\n                        max={10}\n                    />\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n\n                    <Button id=\"TEST2\" onClick={OverHandShuffle} style={{ margin: '5px' }} >Shuffle</Button>\n                    <Button onClick={TenOverHandShuffles} style={{ margin: '5px' }} >Shuffle 10</Button>\n                    <Button onClick={HundredOverHandShuffles} style={{ margin: '5px' }} >Shuffle 100</Button>\n                    <Button onClick={HandleReset} style={{ margin: '5px' }} >Reset</Button>\n\n                </Row>\n                <br />\n\n\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <ShowCards AllCards={NewDeck} />\n                </Row>\n                <br />\n                <Row style={{ justifyContent: 'center' }}> <strong>Compare Top Half Sum vs Bottom Half Sum</strong></Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Chart\n                        data={[\n                            {\n                                type: 'line',\n                                title: 'Top Half Points vs Bottom Half Points',\n                                color: 'red',\n                                points: StoredValues\n                            }\n                        ]}\n                        keys={\n                            xAxis\n                        }\n                    />\n\n                </Row>\n            </Col>\n\n        </div>\n    );\n}\n\nexport default OverHand;","import React from 'react';\nimport OverHand from './OverHand';\n\nconst OverHandParent = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Overhand Shuffle</h3>\n            The Overhand shuffle is probably the second most common type of shuffle.\n            The behavior of this shuffling technique is that the cards are severely clumped\n            together. You could predict what cards your opponent has due to the clumping of cards.\n\n            Below you can shuffle a sample deck and see how little the deck has\n            actually been shuffled after an <strong>EVEN</strong> number of shuffles.\n            <br />\n            <br />\n            <div style={{ textAlign: 'center' }}>\n                <img style={{ maxWidth: window.screen.width - 80 }} src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/375ce685-c00c-4f3b-a467-1f6a38391fdd/d88npqq-2a2c5683-2253-4d20-8bbb-371f378b0795.gif?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzM3NWNlNjg1LWMwMGMtNGYzYi1hNDY3LTFmNmEzODM5MWZkZFwvZDg4bnBxcS0yYTJjNTY4My0yMjUzLTRkMjAtOGJiYi0zNzFmMzc4YjA3OTUuZ2lmIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.gnxKmUMykmQHwBbIMxTPrpNehQVE6G868fhqUS_PQtc\" alt=\"overhand shuffle gif\" />\n            </div>\n\n            <br />\n\n\n            <OverHand />\n\n            <br />\n            This shuffle is, by far, worse that the Riffle split because it isn't\n            moving more than a few cards at a time. The position of a card and\n            it's neighbors will not vary half the time. Even if we were to shuffle\n            hundreds and hundreds of times (Shuffle 100), there is still a high card bias with every other\n            shuffle. So depending on the number of times you shuffle (Even VS. Odd number of times), you may or may not\n            play with many high cards.\n            <br />\n\n        </div>\n    )\n\n}\n\nexport default OverHandParent","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport heart from '../assets/heart.svg';\nimport spade from '../assets/spade.svg'\nimport diamond from '../assets/diamond.svg';\nimport club from '../assets/club.svg'\nimport \"./invert.css\"\n\nconst ShowCardsAndKD = props => {\n    const { AllCards } = props;\n\n    const suitDictionary = {\n        \"S\": spade,\n        \"D\": diamond,\n        \"H\": heart,\n        \"C\": club\n    }\n\n    return (\n        <div>\n            {\n                window.screen.width > 1100 ? (\n                    <div>\n                        <Row>\n                            {AllCards.slice(0, 13).map((card, index) =>\n                                <Col id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row>\n                            {AllCards.slice(13, 26).map((card, index) =>\n                                <Col id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row>\n                            {AllCards.slice(26, 39).map((card, index) =>\n                                <Col id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                        <Row>\n                            {AllCards.slice(39, 52).map((card, index) =>\n                                <Col id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ border: \"solid\", width: 90, height: 100, borderRadius: 10 }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </Col>\n                            )}\n                        </Row>\n\n                    </div>\n                )\n\n                    :\n\n                    (<div>\n                        <Row >\n                            {AllCards.slice(0, 13).map((card, index) =>\n                                <rect id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(13, 26).map((card, index) =>\n                                <rect id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(26, 39).map((card, index) =>\n                                <rect id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                        <Row >\n                            {AllCards.slice(39, 52).map((card, index) =>\n                                <rect id={card[\"rank\"] + card[\"suit\"]} key={index} style={{ width: (window.screen.width - 80) / 13, height: 80, border: \"solid\", borderRadius: 4, margin: '1px' }}>\n                                    {card[\"rank\"]}\n                                    <img src={suitDictionary[card[\"suit\"]]} alt=\"suit\" />\n                                </rect>\n                            )}\n                        </Row>\n\n                    </div>)\n\n            }\n\n\n        </div>\n\n    );\n\n}\nexport default ShowCardsAndKD;","import { Slider } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport Chart from \"r-chart\";\nimport ShowCardsAndKD from './ShowCardsAndKD';\n\nconst BestShuffle = () => {\n\n    //for shuffling purposes\n    let LeftDeck = [];\n    let RightDeck = [];\n\n    //the deck that we will begin with and arrange\n    const [NewDeck, setNewDeck] = useState(OrderedDeck());\n    const [KofDPosition, setKofDPosition] = useState(-52);\n\n    //graphing values\n    const [StoredValues, setStoredValues] = useState([{ \"key\": 0, \"value\": -52 }]);\n    const [xAxis, setxAxis] = useState([0]);\n\n    //perform BestShuffle shuffle on our working deck\n    const BestShuffleShuffle = () => {\n        findKingDiamond();\n\n        if (KofDPosition < -1) {\n            LeftDeck = NewDeck.splice(0, 1);\n            RightDeck = NewDeck.splice(0, 51);\n\n            let newPosition = Math.floor(Math.random() * 51) + 1\n            RightDeck.splice(newPosition, 0, LeftDeck.pop());\n\n            setNewDeck(RightDeck)\n            AddDataToGraph();\n        }\n    }\n\n    function findKingDiamond() {\n        let position = 52;\n        NewDeck.map((card, index) => {\n            if (card[\"rank\"] === \"K\" && card[\"suit\"] === \"D\") {\n                position = index;\n            }\n        })\n        setKofDPosition(-position)\n    }\n\n    //Hard reset everything (graph and init a new deck)\n    const HandleReset = () => {\n        setStoredValues([{ \"key\": 0, \"value\": -52 }]);\n        setxAxis([0]);\n        setNewDeck(OrderedDeck())\n    }\n\n    //Add data to graph dictionary\n    function AddDataToGraph() {\n        let dict = { \"key\": StoredValues.length, \"value\": KofDPosition };\n\n        setStoredValues(prevItems => [...prevItems, dict]);\n        setxAxis(prevItems => [...prevItems, dict[\"key\"]]);\n    }\n\n    //find button with id \"Test3\" and click on it 10 times\n    const TenBestShuffleShuffles = () => {\n        for (let i = 1; i < 11; i++) {\n            setTimeout(() => {\n                document.getElementById(\"Test3\").click();\n            }, 100 * i)\n        }\n    }\n\n    //find button with id \"Test3\" and click on it 100 times\n    const HundredBestShuffleShuffles = () => {\n        for (let i = 1; i < 101; i++) {\n            setTimeout(() => {\n                document.getElementById(\"Test3\").click();\n            }, 100 * i)\n        }\n    }\n\n    return (\n        <div >\n            <Col>\n                <Row style={{ justifyContent: 'center' }}>\n                    <strong>Average is 236 Shuffles</strong>\n                </Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n\n                    <Button id=\"Test3\" onClick={BestShuffleShuffle} style={{ margin: '5px' }} >Shuffle</Button>\n                    <Button onClick={TenBestShuffleShuffles} style={{ margin: '5px' }} >Shuffle 10</Button>\n                    <Button onClick={HundredBestShuffleShuffles} style={{ margin: '5px' }} >Shuffle 100</Button>\n                    <Button onClick={HandleReset} style={{ margin: '5px' }} >Reset</Button>\n\n                </Row>\n                <br />\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <ShowCardsAndKD AllCards={NewDeck} />\n                </Row>\n\n                <br />\n                <Row style={{ justifyContent: 'center' }}> <strong>Compare Top Half Sum vs Bottom Half Sum</strong></Row>\n\n                <Row style={{ justifyContent: 'center' }}>\n                    <Chart\n                        data={[\n                            {\n                                type: 'line',\n                                title: 'Position of The King Of Diamonds per Shuffle',\n                                color: 'green',\n                                points: StoredValues\n                            }\n                        ]}\n                        keys={\n                            xAxis\n                        }\n                    />\n\n                </Row>\n\n\n            </Col>\n\n        </div>\n    );\n}\n\nexport default BestShuffle;","import React from 'react';\nimport BestShuffle from './BestShuffle';\n\nconst BestShuffleParent = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Low Rise Shuffle</h3>\n            This last shuffle method is one that you probably haven't heard of.\n            The technique here is to move the top card into a random spot into the deck.\n            As you progress this shuffle, you will notice that a pre-determined\n            \"bottom card\" (King of Diamonds) will slowly move up in position. Once the \"bottom card\"\n             has moved all the way up to the top of the deck, it is safe to say that most of the deck has been shuffled.\n             All that would be left is to move the bottom card into a random position into the deck.\n             This way, you will have truly randomized the deck.\n\n            Below you can shuffle a sample deck and see how many shuffles it takes\n             to get the bottom King of Diamonds card to the top of the deck.\n            <br />\n            <br />\n\n            <BestShuffle />\n        </div>\n    )\n\n}\n\nexport default BestShuffleParent","\nconst Introduction = () => {\n\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      This site explores the mathematics behind a standard deck of cards as\n      well some shuffling techniques. The purpose is to teach some simple math\n      expressions and concepts in an approachable way.\n    </div>\n  );\n}\n\nexport default Introduction;\n","import Introduction from \"./Introduction\"\n\nconst Title = () => {\n\n\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <h1>\n                The Mathematics Behind a Deck of Cards\n            </h1>\n            <h3>By Erick Saenz</h3>\n\n            <br />\n            ***\n            <Introduction />\n            ***\n        </div>\n\n    );\n}\n\nexport default Title;\n","\nimport React from 'react';\nimport ShowCards from './ShowCards';\nimport OrderedDeck from './OrderedDeck'\nimport { Col, Row } from 'react-bootstrap';\n\nconst ManufacturedDeck = () => {\n  const AllCards = OrderedDeck();\n\n  return (\n    <div>\n      <Col>\n        <Row style={{ justifyContent: 'center' }}>\n          <ShowCards AllCards={AllCards} />\n        </Row>\n      </Col>\n    </div>\n  );\n}\n\nexport default ManufacturedDeck;\n","\nimport React from 'react';\nimport ManufacturedDeck from './ManufacturedDeck'\n\nconst ManufacturedDeckParent = props => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            One of the few things that my friends and family criticize is the way\n            we shuffle cards. We play a variety of card games, but our shuffling\n            techniques between each game remains the same. Since we were taught\n            how to shuffle decks as children, we never questioned the integrity\n            of the shuffle. In this article, I wanted to put popular shuffling techniques\n            to the test and determine what technique truly randomizes the deck of cards.\n\n            Below we see the deck that most manufacturers distrubute, but it raises a few questions:\n\n            <br /><br />\n            1.  What is a good way to measure randomness?\n            <br />\n            2. Are all shuffling methods predictable in nature?\n            <br />\n            3. Do my shuffles give an equal opportunity for every permutation of card order to exist?\n            <br />\n            <br />\n            <h3>Standard Deck of Cards</h3>\n\n            < ManufacturedDeck />\n            <br />\n            <br />\n\n        </div>\n    );\n}\n\nexport default ManufacturedDeckParent;\n","import React from 'react';\nimport MathJax from \"react-mathjax\";\n\nconst SumDraw = props => {\n\n    const tex = ` \\\\sum_{n=1}^{52} \\\\frac{1}{n} `\n    const tex2 = ` \\\\frac{1}{52} + \\\\frac{1}{51} + \\\\frac{1}{50} + \\\\dots  + \\\\frac{1}{2} + \\\\frac{1}{1} `\n    const tex3 = `\\\\approx  4.53804\\\\dots`\n    const options = {\n        tex2jax: {\n            inlineMath: []\n        }\n    }\n\n    return (\n        <div >\n\n            <MathJax.Provider options={options}>\n\n                <MathJax.Node formula={tex} />\n                <div>Which is expressed as ...</div>\n                <MathJax.Node formula={tex2} />\n                <div>Which approximately equals...</div>\n                <MathJax.Node formula={tex3} />\n            </MathJax.Provider>\n\n            <br />\n            <br />\n        </div>\n    );\n}\n\nexport default SumDraw;\n","import React from 'react';\nimport SumDraw from './SumDraw';\n\nconst RandomParent = props => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Determing What is Random </h3>\n\n            Let's say we are going to play a game with a randomized deck of cards in my hand.\n            We will go through the deck one card at a time and your goal is to guess\n            what card is drawn. If you guess the card correctly, then you will be awarded with $1,\n            and the card will be thrown into a discard pile face up.\n            If you do not guess correctly, then there are no consequences and the card will still be thrown\n            into a discard pile face up.\n\n            <br />\n            <br />\n            Your initial odds of guessing a card correctly would be 1-in-52, then 1-in-51, and so forth until\n            we draw the final card. In theory, you should win about four to five dollars in this game.\n            The math behind this game can be seen below. This expression show tells us that we need to add up the \"probability of guessing correctly\" per draw:\n            <br />\n            <br />\n            <SumDraw />\n            To improve your odds of winning, you could shuffle poorly or predictably. Read further below to\n            understand what shuffling looks like on small and large scales.\n            <br />\n            <br />\n        </div>\n    );\n}\n\nexport default RandomParent;\n","import React from 'react';\n\nconst Conclusion = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Conclusion</h3>\n            Now that we've seen the different types of shuffles which one should\n            you adopt? In all honesty, every single shuffle has it's drawbacks,\n            For the riffle split, who would want to play with the same few cards from last round?\n            For the overhand shuffle, cheating and predictability is too easy.\n            And as for the Low-Rise shuffle, who has the patience to stab two hundred some cards into a deck?\n            Suppose you had the money or the experience to build/buy such a machine would be\n            intimidating to a family friendly environment.\n            <br />\n            <br />\n            What you should try is what I would call the 52-Mashup.\n            To perform this shuffle, drop the cards onto the table face down. Then move the cards around for a few seconds.\n            Once you are done moving them around, put them in a neat stack and start playing.\n            Although childish in nature, its quick, simple, and free.\n            This has worked well enough to prevent cheating, and has seen some popularity amongst casinos.\n            <br />\n            <br />\n\n\n            <img style={{ maxWidth: window.screen.width - 80 }} src=\"https://image.shutterstock.com/image-photo/spread-out-face-down-cards-260nw-1379099099.jpg\" />\n            <br />\n            <br />\n\n            <h3>Thanks for Reading</h3>\n        </div>\n    )\n}\n\nexport default Conclusion","import React from 'react';\nimport MathJax from \"react-mathjax\";\n\nconst Permutations = props => {\n\n    const tex = `52!`\n    const tex2 = ` 52 \\\\times 51 \\\\times 50 \\\\times \\\\dots \\\\times 3 \\\\times 2 \\\\times 1 `\n    const tex3 = `= 80658175170943878571660636856403766975289505440883277824000000000000`\n    const tex4 = `= 8.06 \\\\times10^{67}`\n    const options = {\n        tex2jax: {\n            inlineMath: []\n        }\n    }\n\n    return (\n        <div >\n            <MathJax.Provider options={options}>\n                <MathJax.Node formula={tex} />\n                <div>Which is expressed as ...</div>\n                <MathJax.Node formula={tex2} />\n\n\n                {window.innerWidth > 600 ?\n                    (\n                        <div>Which equals ...\n                            <MathJax.Node formula={tex3} />\n\n                        </div>)\n                    : (\n                        <div>Which approximately equals ...\n                            <MathJax.Node formula={tex4} />\n                        </div>\n                    )\n                }\n\n                <div>Also known as \"that big number\"</div>\n            </MathJax.Provider>\n            <br />\n            <br />\n        </div>\n    );\n}\n\nexport default Permutations;\n","import React from 'react';\n\nconst ShowThreeArrangements = () => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            {\"{ A, B, C }\"}\n            <br />\n            {\"{ A, C, B }\"}\n            <br />\n            {\"{ B, A, C }\"}\n            <br />\n            {\"{ B, C, A }\"}\n            <br />\n            {\"{ C, A, B }\"}\n            <br />\n            {\"{ C, B, A }\"}\n        </div>\n    );\n}\n\nexport default ShowThreeArrangements;\n","import React from 'react';\nimport Permutations from './Permutations';\nimport ShowThreeArrangements from './ShowThreeArrangements';\n\nconst TotalPermutations = props => {\n\n    return (\n        <div className=\"m-3\" style={{ textAlign: 'center' }}>\n            <h3>Every Deck Permutation </h3>\n            The odds of you playing with the same deck twice is nearly impossible.\n            Even though there are, what seem to be, an infinite set of deck arrangements,\n            we can still tailor a game to our advangate. To understand what I mean by infinite arrangements,\n            lets take a look at a deck made up by 3 cards first.\n\n            <br />\n            <br />\n            <strong>Deck consists of three face cards A, B, C</strong>\n            <br />\n            <ShowThreeArrangements />\n            <br />\n            Unfortunately, the english language only has <strong>26</strong> letters, therfore, showing every\n            permutation of <strong>52</strong> cards this way, would be impossible and time consuming.\n            <br />\n            <br />\n\n            The Math expression for this factorial is seen below.\n            <Permutations />\n\n            That big number above is the total number of deck orientations that you could possibly\n            play with, therfore leading to a new game every time. Seeing how we tend to start\n            with a <strong>manugactured deck</strong>, which has a one-in-that-big-number\n            chance of being used, is given to us, I wanted to make sure we give all other deck\n            orientations a chance of being played with.\n\n            <br />\n            <br />\n            So how should we shuffle then?\n        </div>\n    );\n}\n\nexport default TotalPermutations;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport RiffleSplitParent from './components/RiffleSplitParent'\nimport OverHandParent from './components/OverHandParent';\nimport BestShuffleParent from './components/BestShuffleParent';\nimport Title from './components/Title';\nimport ManufacturedDeckParent from './components/ManufacturedDeckParent';\nimport RandomParent from './components/RandomParent';\nimport Conclusion from './components/Conclusion';\nimport { useState } from 'react';\nimport TotalPermutations from './components/TotalPermutations';\n\n\nconst App = () => {\n  const [windowSize, setWindowSize] = useState(window.innerWidth)\n\n  window.addEventListener(\"resize\", function () {\n    setWindowSize(this.window.innerWidth)\n  })\n\n\n  return (\n    <div style={{ justifyContent: 'center', display: 'flex', marginTop: '30px' }}>\n      {\n        windowSize > 990 ?\n\n          (<div className=\"d-none d-lg-block\" style={{ maxWidth: \"1100px\" }}>\n            <Title />\n            <ManufacturedDeckParent />\n            <RandomParent />\n            <TotalPermutations />\n            <RiffleSplitParent />\n            <OverHandParent />\n            <BestShuffleParent />\n            <Conclusion />\n          </div>)\n          :\n\n          (<div className=\"d-lg-none\" style={{ maxWidth: window.screen.width - 50 }} >\n            <Title />\n            <ManufacturedDeckParent />\n            <RandomParent />\n            <TotalPermutations />\n            <RiffleSplitParent />\n            <OverHandParent />\n            <BestShuffleParent />\n            <Conclusion />\n          </div>\n          )\n      }\n    </div >\n  );\n}\n\nexport default App;\n\n\n//      <div className=\"d-none d-lg-block\" style={{ maxWidth: \"1100px\" }}>\n//      <div/>\n\n//      <div className = \"d-lg-none\">\n//      <div/>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}